# Posts table
posts = Table('Posts', metadata,
    Column('Id', Integer, primary_key=True),
    Column('PostTypeId', Integer),
    Column('AcceptedAnswerId', Integer),
    Column('ParentId', Integer),
    Column('CreationDate', DateTime),
    Column('DeletionDate', DateTime),
    Column('Score', Integer),
    Column('ViewCount', Integer),
    Column('Body', String),
    Column('OwnerUserId', Integer),
    Column('OwnerDisplayName', String),
    Column('LastEditorUserId', Integer),
    Column('LastEditorDisplayName', String),
    Column('LastEditDate', DateTime),
    Column('LastActivityDate', DateTime),
    Column('Title', String),
    Column('Tags', String),
    Column('AnswerCount', Integer),
    Column('CommentCount', Integer),
    Column('FavoriteCount', Integer),
    Column('ClosedDate', DateTime),
    Column('CommunityOwnedDate', DateTime),
    Column('ContentLicense', String)
)

# Users table
users = Table('Users', metadata,
    Column('Id', Integer, primary_key=True),
    Column('Reputation', Integer),
    Column('CreationDate', DateTime),
    Column('DisplayName', String),
    Column('LastAccessDate', DateTime),
    Column('WebsiteUrl', String),
    Column('Location', String),
    Column('AboutMe', String),
    Column('Views', Integer),
    Column('UpVotes', Integer),
    Column('DownVotes', Integer),
    Column('ProfileImageUrl', String),
    Column('EmailHash', String),
    Column('AccountId', Integer)
)

# Comments table
comments = Table('Comments', metadata,
    Column('Id', Integer, primary_key=True),
    Column('PostId', Integer),
    Column('Score', Integer),
    Column('Text', String),
    Column('CreationDate', DateTime),
    Column('UserDisplayName', String),
    Column('UserId', Integer),
    Column('ContentLicense', String)
)

# Badges table
badges = Table('Badges', metadata,
    Column('Id', Integer, primary_key=True),
    Column('UserId', Integer),
    Column('Name', String),
    Column('Date', DateTime),
    Column('Class', SmallInteger),
    Column('TagBased', Boolean)
)

# CloseAsOffTopicReasonTypes table
close_as_off_topic_reason_types = Table('CloseAsOffTopicReasonTypes', metadata,
    Column('Id', SmallInteger, primary_key=True),
    Column('IsUniversal', Boolean),
    Column('InputTitle', String(100)),
    Column('MarkdownInputGuidance', String(500)),
    Column('MarkdownPostOwnerGuidance', String(500)),
    Column('MarkdownPublicGuidance', String(500)),
    Column('MarkdownConcensusDescription', String(500)),
    Column('CreationDate', DateTime),
    Column('CreationModeratorId', Integer),
    Column('ApprovalDate', DateTime),
    Column('ApprovalModeratorId', Integer),
    Column('DeactivationDate', DateTime),
    Column('DeactivationModeratorId', Integer)
)

# CloseReasonTypes table
close_reason_types = Table('CloseReasonTypes', metadata,
    Column('Id', Integer, primary_key=True),
    Column('Name', String(200)),
    Column('Description', String(500))
)

# FlagTypes table
flag_types = Table('FlagTypes', metadata,
    Column('Id', Integer, primary_key=True),
    Column('Name', String(50)),
    Column('Description', String(500))
)

# PendingFlags table
pending_flags = Table('PendingFlags', metadata,
    Column('Id', Integer, primary_key=True),
    Column('FlagTypeId', Integer),
    Column('PostId', Integer),
    Column('CreationDate', Date),
    Column('CloseReasonTypeId', Integer),
    Column('CloseAsOffTopicReasonTypeId', SmallInteger),
    Column('DuplicateOfQuestionId', Integer),
    Column('BelongsOnBaseHostAddress', String(100))
)

# PostFeedback table
post_feedback = Table('PostFeedback', metadata,
    Column('Id', Integer, primary_key=True),
    Column('PostId', Integer),
    Column('IsAnonymous', Boolean),
    Column('VoteTypeId', Integer),
    Column('CreationDate', DateTime)
)

# PostHistory table
post_history = Table('PostHistory', metadata,
    Column('Id', Integer, primary_key=True),
    Column('PostHistoryTypeId', Integer),
    Column('PostId', Integer),
    Column('RevisionGUID', String(length=36)),
    Column('CreationDate', DateTime),
    Column('UserId', Integer),
    Column('UserDisplayName', String(40)),
    Column('Comment', String(400)),
    Column('Text', String),
    Column('ContentLicense', String(12))
)

# PostHistoryTypes table
post_history_types = Table('PostHistoryTypes', metadata,
    Column('Id', Integer, primary_key=True),
    Column('Name', String(50))
)

# PostLinks table
post_links = Table('PostLinks', metadata,
    Column('Id', Integer, primary_key=True),
    Column('CreationDate', DateTime),
    Column('PostId', Integer),
    Column('RelatedPostId', Integer),
    Column('LinkTypeId', Integer)
)
# PostNotices table
post_notices = Table('PostNotices', metadata,
    Column('Id', Integer, primary_key=True),
    Column('PostId', Integer),
    Column('PostNoticeTypeId', Integer),
    Column('CreationDate', DateTime),
    Column('DeletionDate', DateTime),
    Column('ExpiryDate', DateTime),
    Column('Body', String),
    Column('OwnerUserId', Integer),
    Column('DeletionUserId', Integer)
)

# PostNoticeTypes table
post_notice_types = Table('PostNoticeTypes', metadata,
    Column('Id', Integer, primary_key=True),
    Column('ClassId', Integer),
    Column('Name', String(80)),
    Column('Body', String),
    Column('IsHidden', Boolean),
    Column('Predefined', Boolean),
    Column('PostNoticeDurationId', Integer)
)

# PostsWithDeleted table
posts_with_deleted = Table('PostsWithDeleted', metadata,
    Column('Id', Integer, primary_key=True),
    Column('PostTypeId', Integer),
    Column('AcceptedAnswerId', Integer),
    Column('ParentId', Integer),
    Column('CreationDate', DateTime),
    Column('DeletionDate', DateTime),
    Column('Score', Integer),
    Column('ViewCount', Integer),
    Column('Body', String),
    Column('OwnerUserId', Integer),
    Column('OwnerDisplayName', String(40)),
    Column('LastEditorUserId', Integer),
    Column('LastEditorDisplayName', String(40)),
    Column('LastEditDate', DateTime),
    Column('LastActivityDate', DateTime),
    Column('Title', String(250)),
    Column('Tags', String(250)),
    Column('AnswerCount', Integer),
    Column('CommentCount', Integer),
    Column('FavoriteCount', Integer),
    Column('ClosedDate', DateTime),
    Column('CommunityOwnedDate', DateTime),
    Column('ContentLicense', String(12))
)

# PostTags table
post_tags = Table('PostTags', metadata,
    Column('PostId', Integer, primary_key=True),
    Column('TagId', Integer, primary_key=True)
)

# PostTypes table
post_types = Table('PostTypes', metadata,
    Column('Id', Integer, primary_key=True),
    Column('Name', String(50))
)

# ReviewRejectionReasons table
review_rejection_reasons = Table('ReviewRejectionReasons', metadata,
    Column('Id', Integer, primary_key=True),
    Column('Name', String(100)),
    Column('Description', String(300)),
    Column('PostTypeId', Integer)
)
# ReviewTaskResults table
review_task_results = Table('ReviewTaskResults', metadata,
    Column('Id', Integer, primary_key=True),
    Column('ReviewTaskId', Integer),
    Column('ReviewTaskResultTypeId', Integer),
    Column('CreationDate', Date),
    Column('RejectionReasonId', Integer),
    Column('Comment', String(400))
)

# ReviewTaskResultTypes table
review_task_result_types = Table('ReviewTaskResultTypes', metadata,
    Column('Id', Integer, primary_key=True),
    Column('Name', String(100)),
    Column('Description', String(300))
)

# ReviewTasks table
review_tasks = Table('ReviewTasks', metadata,
    Column('Id', Integer, primary_key=True),
    Column('ReviewTaskTypeId', Integer),
    Column('CreationDate', Date),
    Column('DeletionDate', Date),
    Column('ReviewTaskStateId', Integer),
    Column('PostId', Integer),
    Column('SuggestedEditId', Integer),
    Column('CompletedByReviewTaskId', Integer)
)

# ReviewTaskStates table
review_task_states = Table('ReviewTaskStates', metadata,
    Column('Id', Integer, primary_key=True),
    Column('Name', String(50)),
    Column('Description', String(300))
)

# ReviewTaskTypes table
review_task_types = Table('ReviewTaskTypes', metadata,
    Column('Id', Integer, primary_key=True),
    Column('Name', String(50)),
    Column('Description', String(300))
)

# SuggestedEdits table
suggested_edits = Table('SuggestedEdits', metadata,
    Column('Id', Integer, primary_key=True),
    Column('PostId', Integer),
    Column('CreationDate', DateTime),
    Column('ApprovalDate', DateTime),
    Column('RejectionDate', DateTime),
    Column('OwnerUserId', Integer),
    Column('Comment', String(800)),
    Column('Text', String),
    Column('Title', String(250)),
    Column('Tags', String(250)),
    Column('RevisionGUID', String(length=36))
)

# SuggestedEditVotes table
suggested_edit_votes = Table('SuggestedEditVotes', metadata,
    Column('Id', Integer, primary_key=True),
    Column('SuggestedEditId', Integer),
    Column('UserId', Integer),
    Column('VoteTypeId', Integer),
    Column('CreationDate', DateTime),
    Column('TargetUserId', Integer),
    Column('TargetRepChange', Integer)
)

# Tags table
tags = Table('Tags', metadata,
    Column('Id', Integer, primary_key=True),
    Column('TagName', String(35)),
    Column('Count', Integer),
    Column('ExcerptPostId', Integer),
    Column('WikiPostId', Integer),
    Column('IsModeratorOnly', Boolean),
    Column('IsRequired', Boolean)
)

# TagSynonyms table
tag_synonyms = Table('TagSynonyms', metadata,
    Column('Id', Integer, primary_key=True),
    Column('SourceTagName', String(35)),
    Column('TargetTagName', String(35)),
    Column('CreationDate', DateTime),
    Column('OwnerUserId', Integer),
    Column('AutoRenameCount', Integer),
    Column('LastAutoRename', DateTime),
    Column('Score', Integer),
    Column('ApprovedByUserId', Integer),
    Column('ApprovalDate', DateTime)
)

# Votes table
votes = Table('Votes', metadata,
    Column('Id', Integer, primary_key=True),
    Column('PostId', Integer)
)
# VoteTypes table
vote_types = Table('VoteTypes', metadata,
    Column('Id', Integer, primary_key=True),
    Column('Name', String(50))
)
